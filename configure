#!/bin/bash

# rAthena Enhanced Configuration Script
# This script handles project configuration and setup for rAthena builds
# Separated from build process for proper separation of concerns

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
BUILD_TYPE="Release"
BUILD_DIR="build"
USE_CMAKE=true
VERBOSE=false
CONFIGURE_ARGS=""
CONFIG_FILE=".rathena_config"
CMAKE_ARGS_TRANSLATED=""

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    cat << EOF
rAthena Enhanced Configuration Script

Usage: $0 [CONFIGURATION_OPTIONS] [-- CONFIGURE_OPTIONS]

CONFIGURATION OPTIONS:
    -t, --type TYPE         Build type: Debug, Release, RelWithDebInfo (default: Release)
    -d, --dir DIR           Build directory (default: build)
    -m, --make              Use traditional make instead of CMake
    -v, --verbose           Verbose output
    -h, --help              Show this help message

CONFIGURE OPTIONS (passed to ./configure.original or translated to CMake):
    All standard rAthena configure options are supported after '--'

    Common rAthena options:
    --enable-packetver=VER  Set packet version (e.g., 20180620, 20200401)
    --enable-prere          Enable pre-renewal mode
    --enable-renewal        Enable renewal mode (default)
    --enable-debug          Enable debug mode
    --enable-vip            Enable VIP features
    --enable-warn           Enable compiler warnings
    --with-mysql=PATH       MySQL installation path
    --with-pcre=PATH        PCRE library path
    --with-zlib=PATH        Zlib library path
    --with-maxconn=NUM      Maximum connections

EXAMPLES:
    # Basic configuration with default settings
    $0

    # Pre-renewal mode with specific packet version
    $0 -- --enable-prere --enable-packetver=20180620

    # Debug build with VIP features
    $0 -t Debug -- --enable-debug --enable-vip

    # Traditional make with renewal and custom MySQL
    $0 -m -- --enable-renewal --with-mysql=/usr/local/mysql

    # Configuration with warnings enabled
    $0 -- --enable-warn --enable-debug

NOTE: This script only configures the build. Use './build' to compile after configuration.

EOF
}

# Function to parse arguments
parse_arguments() {
    local configure_mode=false

    while [[ $# -gt 0 ]]; do
        if [ "$configure_mode" = true ]; then
            # Everything after -- goes to configure
            CONFIGURE_ARGS="$CONFIGURE_ARGS $1"
            shift
            continue
        fi

        case $1 in
            -t|--type)
                BUILD_TYPE="$2"
                shift 2
                ;;
            -d|--dir)
                BUILD_DIR="$2"
                shift 2
                ;;
            -m|--make)
                USE_CMAKE=false
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            --)
                configure_mode=true
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                print_info "Use --help for usage information"
                exit 1
                ;;
        esac
    done
}

# Function to validate and setup build configuration
setup_build_config() {
    # Validate build type
    case $BUILD_TYPE in
        Debug|Release|RelWithDebInfo|MinSizeRel)
            ;;
        *)
            print_error "Invalid build type: $BUILD_TYPE"
            print_info "Valid types: Debug, Release, RelWithDebInfo, MinSizeRel"
            exit 1
            ;;
    esac

    print_info "Configuration setup:"
    print_info "  Build system: $([ "$USE_CMAKE" = true ] && echo "CMake" || echo "Traditional Make")"
    print_info "  Build type: $BUILD_TYPE"
    print_info "  Build directory: $BUILD_DIR"
    print_info "  Configure args: ${CONFIGURE_ARGS:-"(default)"}"
}

# Function to save configuration to file
save_configuration() {
    # Use a more robust approach for WSL/Windows filesystem compatibility
    local retry_count=0
    local max_retries=3

    while [ $retry_count -lt $max_retries ]; do
        if {
            echo "# rAthena Build Configuration"
            echo "# Generated by configure script on $(date)"
            echo "BUILD_TYPE=\"$BUILD_TYPE\""
            echo "BUILD_DIR=\"$BUILD_DIR\""
            echo "USE_CMAKE=$USE_CMAKE"
            echo "VERBOSE=$VERBOSE"
            echo "CONFIGURE_ARGS=\"$CONFIGURE_ARGS\""
            echo "CMAKE_ARGS=\"${CMAKE_ARGS_TRANSLATED:-}\""
        } > "$CONFIG_FILE" 2>/dev/null; then
            print_success "Configuration saved to $CONFIG_FILE"
            return 0
        else
            retry_count=$((retry_count + 1))
            print_warning "Failed to write config file (attempt $retry_count/$max_retries)"
            sleep 1
        fi
    done

    print_error "Failed to write configuration file after $max_retries attempts"
    return 1
}

# Function to run traditional configure
run_traditional_configure() {
    if [ ! -f "configure.original" ]; then
        print_error "Original configure script not found (configure.original)"
        print_info "Please ensure the original autotools configure script is available"
        exit 1
    fi

    if [ -n "$CONFIGURE_ARGS" ]; then
        print_info "Running traditional configure with custom options: $CONFIGURE_ARGS"
        if [ "$VERBOSE" = true ]; then
            ./configure.original $CONFIGURE_ARGS
        else
            ./configure.original $CONFIGURE_ARGS >/dev/null 2>&1
        fi
    else
        print_info "Running traditional configure with default options"
        if [ "$VERBOSE" = true ]; then
            ./configure.original
        else
            ./configure.original >/dev/null 2>&1
        fi
    fi
}

# Function to translate configure arguments to CMake arguments
translate_configure_to_cmake() {
    local cmake_args=()

    if [ -n "$CONFIGURE_ARGS" ]; then
        print_info "Translating configure arguments to CMake options..."

        # Parse configure arguments
        for arg in $CONFIGURE_ARGS; do
            case $arg in
                --enable-prere|--enable-prere=yes)
                    cmake_args+=(-DENABLE_PRERE=ON)
                    cmake_args+=(-DENABLE_RENEWAL=OFF)
                    print_info "  Translated: $arg -> -DENABLE_PRERE=ON -DENABLE_RENEWAL=OFF"
                    ;;
                --disable-prere|--enable-prere=no)
                    cmake_args+=(-DENABLE_PRERE=OFF)
                    ;;
                --enable-renewal|--enable-renewal=yes)
                    cmake_args+=(-DENABLE_RENEWAL=ON)
                    cmake_args+=(-DENABLE_PRERE=OFF)
                    print_info "  Translated: $arg -> -DENABLE_RENEWAL=ON -DENABLE_PRERE=OFF"
                    ;;
                --disable-renewal|--enable-renewal=no)
                    cmake_args+=(-DENABLE_RENEWAL=OFF)
                    ;;
                --enable-packetver=*)
                    local packetver="${arg#*=}"
                    cmake_args+=(-DPACKETVER="$packetver")
                    print_info "  Translated: $arg -> -DPACKETVER=$packetver"
                    ;;
                --enable-debug|--enable-debug=yes)
                    cmake_args+=(-DENABLE_DEBUG=ON)
                    print_info "  Translated: $arg -> -DENABLE_DEBUG=ON"
                    ;;
                --disable-debug|--enable-debug=no)
                    cmake_args+=(-DENABLE_DEBUG=OFF)
                    ;;
                --enable-vip|--enable-vip=yes)
                    cmake_args+=(-DENABLE_VIP=ON)
                    print_info "  Translated: $arg -> -DENABLE_VIP=ON"
                    ;;
                --disable-vip|--enable-vip=no)
                    cmake_args+=(-DENABLE_VIP=OFF)
                    ;;
                --enable-warn|--enable-warn=yes)
                    cmake_args+=(-DENABLE_WARN=ON)
                    print_info "  Translated: $arg -> -DENABLE_WARN=ON"
                    ;;
                --disable-warn|--enable-warn=no)
                    cmake_args+=(-DENABLE_WARN=OFF)
                    ;;
                --enable-epoll|--enable-epoll=yes)
                    cmake_args+=(-DENABLE_EPOLL=ON)
                    print_info "  Translated: $arg -> -DENABLE_EPOLL=ON"
                    ;;
                --disable-epoll|--enable-epoll=no)
                    cmake_args+=(-DENABLE_EPOLL=OFF)
                    ;;
                --enable-rdtsc|--enable-rdtsc=yes)
                    cmake_args+=(-DENABLE_RDTSC=ON)
                    print_info "  Translated: $arg -> -DENABLE_RDTSC=ON"
                    ;;
                --disable-rdtsc|--enable-rdtsc=no)
                    cmake_args+=(-DENABLE_RDTSC=OFF)
                    ;;
                --enable-buildbot|--enable-buildbot=yes)
                    cmake_args+=(-DENABLE_EXTRA_BUILDBOT_CODE=ON)
                    print_info "  Translated: $arg -> -DENABLE_EXTRA_BUILDBOT_CODE=ON"
                    ;;
                --disable-buildbot|--enable-buildbot=no)
                    cmake_args+=(-DENABLE_EXTRA_BUILDBOT_CODE=OFF)
                    ;;
                --with-maxconn=*)
                    local maxconn="${arg#*=}"
                    cmake_args+=(-DMAXCONN="$maxconn")
                    print_info "  Translated: $arg -> -DMAXCONN=$maxconn"
                    ;;
                --with-outputlogin=*)
                    local output="${arg#*=}"
                    cmake_args+=(-DOUTPUT_LOGIN="$output")
                    print_info "  Translated: $arg -> -DOUTPUT_LOGIN=$output"
                    ;;
                --with-outputchar=*)
                    local output="${arg#*=}"
                    cmake_args+=(-DOUTPUT_CHAR="$output")
                    print_info "  Translated: $arg -> -DOUTPUT_CHAR=$output"
                    ;;
                --with-outputmap=*)
                    local output="${arg#*=}"
                    cmake_args+=(-DOUTPUT_MAP="$output")
                    print_info "  Translated: $arg -> -DOUTPUT_MAP=$output"
                    ;;
                --with-outputweb=*)
                    local output="${arg#*=}"
                    cmake_args+=(-DOUTPUT_WEB="$output")
                    print_info "  Translated: $arg -> -DOUTPUT_WEB=$output"
                    ;;
                --enable-profiler=*)
                    local profiler="${arg#*=}"
                    cmake_args+=(-DENABLE_PROFILER="$profiler")
                    print_info "  Translated: $arg -> -DENABLE_PROFILER=$profiler"
                    ;;
                --enable-manager=*)
                    local manager="${arg#*=}"
                    cmake_args+=(-DENABLE_MEMMGR="$manager")
                    print_info "  Translated: $arg -> -DENABLE_MEMMGR=$manager"
                    ;;
                --with-mysql=*|--with-pcre=*|--with-zlib=*)
                    print_warning "  Library path option $arg not directly translatable to CMake"
                    print_warning "  CMake will use system package detection instead"
                    ;;
                *)
                    print_warning "  Unknown configure option: $arg (ignored)"
                    ;;
            esac
        done
    fi

    # Store translated arguments for saving later
    CMAKE_ARGS_TRANSLATED="${cmake_args[*]}"
}

# Function to setup CMake configuration
setup_cmake_config() {
    print_info "Setting up CMake configuration..."

    # Create build directory
    mkdir -p "$BUILD_DIR"

    # Translate configure arguments
    translate_configure_to_cmake

    print_success "CMake configuration prepared"
}

# Main execution
main() {
    echo "rAthena Enhanced Configuration"
    echo "=============================="
    echo ""

    # Parse command line arguments
    parse_arguments "$@"

    # Setup build configuration
    setup_build_config
    echo ""

    # Check if we're in the rAthena source directory
    if [ ! -f "CMakeLists.txt" ] || [ ! -f "configure.original" ]; then
        print_error "This script must be run from the rAthena source directory"
        exit 1
    fi

    # Configure based on selected system
    if [ "$USE_CMAKE" = true ]; then
        setup_cmake_config
    else
        run_traditional_configure
    fi

    # Save configuration after setup
    save_configuration

    print_success "Configuration completed successfully!"
    print_info ""
    print_info "Configuration saved. You can now run './build' to compile the project."

    if [ "$USE_CMAKE" = true ]; then
        print_info "CMake build will be configured in: $BUILD_DIR/"
    else
        print_info "Traditional make build configured in source directory"
    fi
}

# Run main function
main "$@"